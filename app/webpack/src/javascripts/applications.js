/*
 * decaffeinate suggestions:
 * DS101: Remove unnecessary use of Array.from
 * DS102: Remove unnecessary code created because of implicit returns
 * DS205: Consider reworking code to avoid use of IIFEs
 * Full docs: https://github.com/decaffeinate/decaffeinate/blob/master/docs/suggestions.md
 */
// Place all the behaviors and hooks related to the matching controller here.
// All this logic will automatically be available in application.js.
// You can use CoffeeScript in this file: http://coffeescript.org/

const sum_amounts = function(applied, other) {
  const a = parseFloat(applied);
  const b = parseFloat(other);
  return a + b;
};

// replaces all occurences of id in node attributes with new id
const replace_id = function(node, id) {
  const attribute_id_regex = /[\[\_]\d+[\_\]]/;
  const { attributes } = node;
  if (attributes !== undefined) {
    return (() => {
      const result = [];
      for (let attr of Array.from(attributes)) {
        let res = attr.value.match(attribute_id_regex);
        if (res !== null) {
          res = res[0].replace(/\d+/, id);
          result.push(attr.value = attr.value.replace(attribute_id_regex, res));
        } else {
          result.push(undefined);
        }
      }
      return result;
    })();
  }
};

// recursively replaces id's on all of nodes' children
var recursively_replace_children_attributes = function(node, id) {
  replace_id(node, id);
  return Array.from(node.childNodes).map((child) =>
    recursively_replace_children_attributes(child, id));
};

// creates row with changed id on all attributes that have id
const create_unique_row = function(row) {
  const new_row = row.cloneNode(true);
  const date = new Date();
  const new_id = date.getTime();
  recursively_replace_children_attributes(new_row, new_id);
  return new_row;
};

// render application of table row id
const view_application = function(table_row) {};

// TODO maximum precision, odd behavior with float, for example 0.33
// sums up as 0.330000000004
$('#application_amount_applied_for').on('input', function() {
  const sum = sum_amounts($('#application_amount_applied_for').val(),
    $('#application_amount_other_sources').val());
  return $('#application_amount_overall').val(sum);
});

$('#application_amount_other_sources').on('input', function() {
  const sum = sum_amounts($('#application_amount_applied_for').val(),
    $('#application_amount_other_sources').val());
  return $('#application_amount_overall').val(sum);
});

// create copies of rows generated by simple forms
const role_row = document.querySelector('.role_row');
const schedule_items_row = document.querySelector('.schedule_items_row');
const experiences_row = document.querySelector('.experiences_row');

$('#add_member').on('click', function() {
  const new_row = create_unique_row(role_row);
  const btn = document.getElementById('add_member');
  return btn.parentNode.insertBefore(new_row, btn);
});

$('#add_schedule_item').on('click', function() {
  const new_row = create_unique_row(schedule_items_row);
  const btn = document.getElementById('add_schedule_item');
  return btn.parentNode.insertBefore(new_row, btn);
});

$('#add_experience').on('click', function() {
  const new_row = create_unique_row(experiences_row);
  const btn = document.getElementById('add_experience');
  return btn.parentNode.insertBefore(new_row, btn);
});

// remove row to which this button belongs
$(document).on('click', '.remove_row', function() {
  return this.parentNode.remove();
});

// clickable row - go to application view page
$(".clickable-row").click(function() {
  return window.location = $(this).data("href");
});

  // selectable row - select rows of applications to submit
  var selections = [];
  var decision;

  $(function(){
    $('#selectable').selectable({
      filter:'tr',
      cancel: 'a',
      selected: function(event, ui){
        console.log(event);
        console.log(ui);
        var s=$(this).find('.ui-selected');
        console.log(s);
      }
    })
  });

  // select action
  
  $(function(){
    $('#accept').click(function(){
      $('#actionName').attr("value", "Zaakceptuj");
      $('#actionName').removeAttr("disabled");
      $('#actionName').attr("type", "submit");
      decision = "accept";
      $("[name=decision]").attr("value", "accept");
    }
    );
  });

  $(function(){
    $('#reject').click(function(){
      $('#actionName').attr("value", "Odrzuć");
      $('#actionName').removeAttr("disabled");
      $('#actionName').attr("type", "submit");
      decision = "reject";
      $("[name=decision]").attr("value", "reject");
    }
    );
  });

  $(function(){
    $('#pend').click(function(){
      $('#actionName').attr("value", "Oczekuj");
      $('#actionName').removeAttr("disabled");
      $('#actionName').attr("type", "submit");
      decision = "pend";
      $("[name=decision]").attr("value", "pend");
    }
    );
  });

  $(function(){
    $('#delete').click(function(){
      $('#actionName').attr("value", "Usuń");
      $('#actionName').removeAttr("disabled");
      $('#actionName').attr("type", "submit");
      decision = "delete"
      $("[name=decision]").attr("value", "delete");
    }
    );
  });

  $(function(){ 
    $("#selectable").selectable({
       selected: function(event, ui){
         selections.push(ui.selected.id);
         console.log(selections);
      $("[name=selections]").attr("value", selections);
       }
,
       unselecting: function(event, ui){
         var index = selections.indexOf(ui.unselecting.id)
         if (index > -1) {
           selections.splice(index, 1);
         }
         console.log(selections);
      $("[name=selections]").attr("value", selections);
       }
    });
  });